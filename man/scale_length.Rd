% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/length.R
\name{scale_length}
\alias{scale_x_length}
\alias{scale_y_length}
\title{Position scales for length or distance data}
\usage{
scale_x_length(name = waiver(), breaks = waiver(),
  minor_breaks = waiver(), labels = waiver(), limits = NULL,
  expand = waiver(), oob = censor, na.value = NA_real_,
  position = "bottom", sec.axis = waiver(), base = "metre",
  system = "metric", ignore = NULL)

scale_y_length(name = waiver(), breaks = waiver(),
  minor_breaks = waiver(), labels = waiver(), limits = NULL,
  expand = waiver(), oob = censor, na.value = NA_real_,
  position = "left", sec.axis = waiver(), base = "metre",
  system = "metric", ignore = NULL)
}
\arguments{
\item{name}{The name of the scale. Used as the axis or legend title. If
\code{waiver()}, the default, the name of the scale is taken from the first
mapping used for that aesthetic. If \code{NULL}, the legend title will be
omitted.}

\item{breaks}{One of:
\itemize{
\item \code{NULL} for no breaks
\item \code{waiver()} for the default breaks computed by the
transformation object
\item A numeric vector of positions
\item A function that takes the limits as input and returns breaks
as output
}}

\item{minor_breaks}{One of:
\itemize{
\item \code{NULL} for no minor breaks
\item \code{waiver()} for the default breaks (one minor break between
each major break)
\item A numeric vector of positions
\item A function that given the limits returns a vector of minor breaks.
}}

\item{labels}{One of:
\itemize{
\item \code{NULL} for no labels
\item \code{waiver()} for the default labels computed by the
transformation object
\item A character vector giving labels (must be same length as \code{breaks})
\item A function that takes the breaks as input and returns labels
as output
}}

\item{limits}{A numeric vector of length two providing limits of the scale.
Use \code{NA} to refer to the existing minimum or maximum.}

\item{expand}{Vector of range expansion constants used to add some
padding around the data, to ensure that they are placed some distance
away from the axes. Use the convenience function \code{\link[=expand_scale]{expand_scale()}}
to generate the values for the \code{expand} argument. The defaults are to
expand the scale by 5\% on each side for continuous variables, and by
0.6 units on each side for discrete variables.}

\item{oob}{Function that handles limits outside of the scale limits
(out of bounds). The default replaces out of bounds values with \code{NA}.}

\item{na.value}{Missing values will be replaced with this value.}

\item{position}{The position of the axis. "left" or "right" for vertical
scales, "top" or "bottom" for horizontal scales}

\item{sec.axis}{specify a secondary axis}

\item{base}{Character, dertermine what the base unit is, defaults to "metre".}

\item{system}{Character, dertermine what measurement system to use is,
defaults to "metric".}

\item{ignore}{Character, which units to ignore.}
}
\description{
This scale allow for easy labeling of data in distance measurements.
The scale has two major arguments, `base` and `system`. `system` determine
the measurement system, currently "imperial" and "metric" is implemented.
For `base` please refer to details.
}
\details{
For "metric", base must be one of
\itemize{
\item kilometre
\item metre
\item centimetre
\item millimetre
\item micrometre
\item nanometre
}

And for "imperial", base must be one of
\itemize{
\item mile
\item yard
\item foot
\item inch
}
}
\examples{
library(ggplot2)
set.seed(1)
df <- data.frame(
  x = 1:100,
  y = cumsum(rnorm(100)) * 100
)

base <- ggplot(df, aes(x, y)) +
  geom_line()

# Will default to grams
base +
  scale_y_length()

# Different baseline unit can be set with `base` argument
base +
  scale_y_length(base = "millimetre")

# Imperial system also implemented
base +
  scale_y_length(base = "inch", system = "imperial")

# Transformation between systems can be done on the fly. First element
# of system denotes the system you are moving from, and the second element
# denotes the system you are moving to.
base +
  scale_y_length(base = "millimetre", system = c("metric", "imperial"))
}
\seealso{
Other position scales: \code{\link{scale_x_mass}}
}
\concept{position scales}
